"                                ___           ___           ___
"      ___                      /\  \         /\  \         /\__\
"     /\  \        ___         |::\  \       /::\  \       /:/  /
"     \:\  \      /\__\        |:|:\  \     /:/\:\__\     /:/  /
"      \:\  \    /:/__/      __|:|\:\  \   /:/ /:/  /    /:/  /  ___
"  ___  \:\__\  /::\  \     /::::|_\:\__\ /:/_/:/__/___ /:/__/  /\__\
" /\  \ |:|  |  \/\:\  \__  \:\~~\  \/__/ \:\/:::::/  / \:\  \ /:/  /
" \:\  \|:|  |   ~~\:\/\__\  \:\  \        \::/~~/~~~~   \:\  /:/  /
"  \:\__|:|__|      \::/  /   \:\  \        \:\~~\        \:\/:/  /
"   \::::/__/       /:/  /     \:\__\        \:\__\        \::/  /
"    ~~~~           \/__/       \/__/         \/__/         \/__/

set nocompatible "不兼容vi
set modelines=0 "忽略 打开的文件 里的vim参数
"set helplang=cn "优先寻找中文帮助

set t_Co=256 "颜色数目
set t_vb='' "禁止错误信息响铃及出错屏幕闪烁
set noerrorbells "禁止错误信息响铃
set novisualbell "禁止出错屏幕闪烁
set ttyfast

set mouse=a "鼠标支持
set clipboard=unnamedplus "使用外部剪贴板
set virtualedit= "禁止在虚空间内操作
set backspace=indent,eol,start "insert模式下删除键可删除
set showmatch "输入括号时显示匹配括号
set completeopt=menu "补全窗口的样式
"set completeopt=longest,menuone "补全窗口的样式

""" 备份 撤销
set hidden "自动保存?
"set directory=~/.vim/swap "交换文件
set undofile "开启撤销历史
set undodir=~/.vim/undo "存放地址
set backup "覆盖文件时备份
set backupdir=~/.vim/backup "存放地址

""" 编码
set encoding=utf-8 "vim内部使用的编码
set fileencoding=utf-8 "默认使用编码
set fileencodings=ucs-bom,utf-8,gb18030 "判断文件编码
set nobomb "去除BOM
set fileformat=unix "默认换行方式
set fileformats=unix,dos "判断换行方式
set ambiwidth=single "宽度不明字符使用单倍字符宽度

""" 行号 命令行 状态行
set number "显示行号
set nowrap "不自动换行
set textwidth=0 "行宽
set colorcolumn=80 "行宽提示

set cmdheight=1 "命令行行数
set showcmd "在命令行显示目前执行的指令
set history=1000 "命令行历史纪录
set wildmenu "命令行补全提示
set wildmode=longest:full,full "补全方式

set laststatus=2 "总是显示状态行
set noshowmode "隐藏信息
set shortmess=atI "状态行信息
"set statusline=%<%F\ %y\ (%{&ff})\ %h%m%r%w%=%-14.(%l,%c%)%p%% "状态行

set display=lastline

""" 搜索
"清除高亮
nmap <silent> <Space> :nohlsearch<CR>
set ignorecase "搜索时忽略大小写
set smartcase "有大写时对大小写敏感
set hlsearch "高亮显示搜索结果
set incsearch "搜索时逐字符高亮
nmap n nzzzv
nmap N Nzzzv

""" 缩进
set expandtab "使用空格缩进
set noexpandtab "使用tab缩进
set tabstop=4 "制表符\t的宽度
set softtabstop=4 "tab键的宽度
set shiftwidth=4 "空格缩进时宽度
set shiftround
set smarttab "智能缩进
set smartindent "智能选择缩进方式
"set autoindent "继承前一行缩进方式
set cindent
set list "显示特殊字符
set listchars=tab:»\ ,eol:\ ,trail:·, "字符样式·¯
autocmd FileType python,markdown set et
autocmd FileType python set nosi
autocmd FileType html,css set ts=2 | set sts=2 | set sw=2

""" 折叠
set foldmethod=indent "折叠方式
set nofoldenable "关闭折叠
set foldlevel=20 "打开小于20层的折叠
set foldcolumn=1
" 选定后用空格创建折叠 用于marker
vmap <silent> <Space> zf
au FileType css,javascript set fdm=marker | set fmr={,}
au FileType c,cpp set fdm=syntax

"""
set splitright
"set splitbelow


""" 插件
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
"common
Bundle 'gmarik/vundle'

Bundle 'ervandew/supertab'
Bundle 'Shougo/neocomplcache'
Bundle 'Shougo/neosnippet'
Bundle 'scrooloose/nerdcommenter'
Bundle 'Lokaltog/vim-powerline'
"Bundle 'Lokaltog/powerline'
Bundle 'tmhedberg/matchit'
Bundle 'Lokaltog/vim-easymotion'

Bundle 'majutsushi/tagbar'
Bundle 'jeetsukumaran/vim-buffergator'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'sjl/gundo.vim'
Bundle 'Yggdroot/indentLine'

"c/c++
Bundle 'a.vim'
Bundle 'Rip-Rip/clang_complete'

"html5
"""syntax indent complete
Bundle 'othree/html5.vim'

"javascript
"""js indent
"Bundle 'pangloss/vim-javascript'
Bundle 'jelera/vim-javascript-syntax'
"Bundle 'maksimr/vim-jsbeautify'
Bundle 'teramako/jscomplete-vim'
"so ****
"Bundle 'michalliu/jsruntime.vim'
"Bundle 'michalliu/jsoncodecs.vim'
"Bundle 'michalliu/sourcebeautify.vim'

"css
Bundle 'ChrisYip/Better-CSS-Syntax-for-Vim'

"python
"Bundle 'sunsol/vim_python_fold_compact'
Bundle 'tmhedberg/SimpylFold'
Bundle 'indentpython.vim--nianyang'
Bundle 'davidhalter/jedi-vim'

"rst markdown pandoc
Bundle 'RST-Tables-CJK'
Bundle 'tpope/vim-markdown'
Bundle 'Rykka/riv.vim'
"Bundle 'vim-pandoc/vim-pandoc'

"sql
"Bundle 'SQLComplete.vim'
"Bundle 'dbext.vim'
Bundle 'sql_iabbr.vim'
Bundle 'sql.vim--Stinson'

"colorscheme
Bundle 'altercation/vim-colors-solarized'
"Bundle 'chriskempson/base16-vim'

""" 载入插件 高亮
filetype plugin indent on "载入文件类型 插件 缩进
syntax enable "语法加亮
au FileType htmldjango set ft=html
au BufRead,BufNewFile *.json set ft=json
"set background=dark "深色背景
set background=light "浅色背景

let g:solarized_termcolors=256
let g:solarized_visibility="low"
let g:solarized_termtrans=1
colorscheme solarized

""" 插件设置
"vundle
let g:vundle_default_git_proto="git"

"supertab
let g:SuperTabDefaultCompletionType="context"
au FileType html,css,javascript let g:SuperTabDefaultCompletionType="<C-X><C-O>"

"neocomplcache
let g:neocomplcache_enable_at_startup=1

"neosnippet
" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" For snippet_complete marker.
if has('conceal')
	set conceallevel=2 concealcursor=i
endif

"clang_complete
let g:clang_complete_auto=0
"let g:clang_snippets=1

"vim-buffergator
nmap <silent> <F2> :BuffergatorOpen<CR>
let g:buffergator_autodismiss_on_select=0
let g:buffergator_split_size=30

"nerd tree
nmap <silent> <F3> :NERDTreeFind<CR>

"syntastic
let g:syntastic_check_on_open=1
let g:syntastic_error_symbol='➥✘'
let g:syntastic_warning_symbol='➥✗'
let syntastic_python_flake8_args='--ignore=E261,E302,E303,E501,W291'

"tagbar
nmap <silent> <F4> :TagbarOpen fj<CR>
let g:tagbar_width=35
let g:tagbar_foldlevel=1
let g:tagbar_sort=0

"jscomplete
let g:jscomplete_use=['dom', 'es6th', 'moz']


"jedi-vim
let g:jedi#auto_vim_configuration=0
let g:jedi#use_tabs_not_buffers=0

"indentLine
let g:indentLine_char='»'

"a.vim
autocmd FileType c,cpp nmap <Leader>a :A<CR>

"powerline
"set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
let g:Powerline_symbols='unicode'

"gundo
nmap <silent> <F5> :GundoToggle<CR>


""" 模板
autocmd BufNewFile *.py 0r ~/.vim/templates/python
autocmd BufNewFile *.html 0r ~/.vim/templates/html
autocmd BufNewFile *.md 0r ~/.vim/templates/markdown
autocmd BufNewFile *.c 0r ~/.vim/templates/c
"autocmd BufNewFile *.js 0r ~/.vim/templates/javascript
"autocmd BufNewFile .gitignore 0r ~/.vim/templates/gitignore
"autocmd BufNewFile *.css 0r ~/.vim/templates/css
"autocmd BufNewFile *.cpp 0r ~/.vim/templates/cpp

""" 其他
" 调整文件
nmap <silent> <F6> :call ReStructureFile()<CR>
function! ReStructureFile()
	let l = line(".")
	let c = col(".")

	" 调整缩进
	if (&ft !~ 'python\|markdown\|text')
		exe 'normal gg=G``'
	endif
	exe 'silent! :retab'

	" 使用\n换行
	let &ff = 'unix'

	" 使用utf-8编码
	let &fenc = 'utf8'

	" 删除行尾空格
	exe 'silent! :%s/\s\+$//g'

	" 删除末尾空行
	let lnum = line('$')
	while lnum
		if !empty(getline(lnum))
			if lnum != line('$')
				exe 'normal '.(lnum+1).'ggdG'
			endif
			break
		endif
		let lnum -= 1
	endwhile

	call cursor(l, c)
endfunction

" 退出输入模式时关闭fcitx
autocmd InsertLeave * let b:fcitx=system('fcitx-remote -c')
