"                                ___           ___           ___
"      ___                      /\  \         /\  \         /\__\
"     /\  \        ___         |::\  \       /::\  \       /:/  /
"     \:\  \      /\__\        |:|:\  \     /:/\:\__\     /:/  /
"      \:\  \    /:/__/      __|:|\:\  \   /:/ /:/  /    /:/  /  ___
"  ___  \:\__\  /::\  \     /::::|_\:\__\ /:/_/:/__/___ /:/__/  /\__\
" /\  \ |:|  |  \/\:\  \__  \:\~~\  \/__/ \:\/:::::/  / \:\  \ /:/  /
" \:\  \|:|  |   ~~\:\/\__\  \:\  \        \::/~~/~~~~   \:\  /:/  /
"  \:\__|:|__|      \::/  /   \:\  \        \:\~~\        \:\/:/  /
"   \::::/__/       /:/  /     \:\__\        \:\__\        \::/  /
"    ~~~~           \/__/       \/__/         \/__/         \/__/

set nocompatible "不兼容vi
set modelines=0 "忽略 打开的文件 里的vim参数
set autoread "macvim
set guifont=Monaco:h14 "macvim
set ambiwidth=single

set t_Co=256 "颜色数目
set t_vb='' "禁止错误信息响铃及出错屏幕闪烁
set noerrorbells "禁止错误信息响铃
set novisualbell "禁止出错屏幕闪烁
set ttyfast
set display=lastline,uhex

set mouse="" "鼠标支持
set lazyredraw
set clipboard=unnamed,unnamedplus,autoselect,autoselectplus "剪贴板
set virtualedit=block "虚空间
set backspace=indent,eol,start "insert模式下删除键可删除
set showmatch "输入括号时显示匹配括号
set completeopt=menu "补全窗口的样式
"set autochdir "进入文件目录
set conceallevel=2
set concealcursor=i
set cryptmethod=blowfish2

""" 备份 撤销
set hidden "自动保存?
set undofile "开启撤销历史
set undodir=~/.vim/undo "存放地址
set backup "覆盖文件时备份
set backupdir=~/.vim/backup "存放地址
set diffopt+=filler,context:3,vertical

""" encoding
set encoding=utf-8 "vim内部使用的编码
set fileencoding=utf-8 "默认使用编码
set fileencodings=ucs-bom,utf-8,big5,gb18030 "判断文件编码
set nobomb "去除BOM
set fileformat=unix "默认换行方式
set fileformats=unix,dos "判断换行方式
set ambiwidth=single "宽度不明字符使用单倍字符宽度

""" 行号 命令行 状态行
set number "显示行号
set nowrap "不自动换行
"set wrap "自动换行
set textwidth=0 "行宽
set colorcolumn=80 "行宽提示
set cursorline "高亮当前行
"set scrolljump=-50 "翻页
noremap <buffer> <silent> <Up> gk
noremap <buffer> <silent> <Down> gj
inoremap <buffer> <silent> <Up> <C-o>gk
inoremap <buffer> <silent> <Down> <C-o>gj

set cmdheight=1 "命令行行数
set showcmd "在命令行显示目前执行的指令
set history=1000 "命令行历史纪录
set wildmenu "命令行补全提示
set wildmode=longest:full,full "补全方式

set laststatus=2 "总是显示状态行
set noshowmode "隐藏信息
set shortmess=atI "状态行信息
"set statusline=%<%F\ %y\ (%{&ff})\ %h%m%r%w%=%-14.(%l,%c%)%p%% "状态行


""" search
"清除高亮
nmap <silent> <Space> :nohlsearch<CR>
set ignorecase "搜索时忽略大小写
set smartcase "有大写时对大小写敏感
set hlsearch "高亮显示搜索结果
set incsearch "搜索时逐字符高亮
nmap n nzzzv
nmap N Nzzzv

""" indent
set noexpandtab "使用tab缩进
set expandtab "使用空格缩进
set tabstop=4 "制表符\t的宽度
set softtabstop=4 "tab键的宽度
set shiftwidth=4 "空格缩进时宽度
set shiftround
set smarttab "智能缩进
set smartindent "智能选择缩进方式
set cindent
set list "显示特殊字符
set listchars=tab:»\ ,eol:\ ,trail:·, "字符样式

""" fold
set foldmethod=indent "折叠方式
set nofoldenable "关闭折叠
set foldlevel=10 "打开小于10层的折叠
set foldcolumn=1
" 选定后用空格创建折叠 用于marker
"vmap <silent> <Space> zf
au FileType c,cpp,css,javascript,scss setl fdm=marker | setl fmr={,}
"au FileType c,cpp set fdm=syntax

""" split
set splitright
"set splitbelow

""" location list
nmap <silent> <F1> :silent! lopen<CR>
autocmd FileType qf nmap <buffer> <CR> <CR>:lclose<CR>
autocmd FileType qf nmap <buffer> q :q<CR>


""" plugin
set runtimepath+=~/.vim/bundle/neobundle.vim/
"let g:neobundle#install_process_timeout = 600
call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" ui
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'bling/vim-airline'

" git
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'airblade/vim-gitgutter'

" navigator
NeoBundle 'Shougo/vimproc', { 'build' : { 'mac' : 'make', 'unix' : 'make' } }
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-outline'

NeoBundle 'scrooloose/nerdtree'
"NeoBundle 'Xuyuanp/nerdtree-git-plugin'
NeoBundle 'jeetsukumaran/vim-buffergator'
"NeoBundle 'majutsushi/tagbar'

" motion
"NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'tmhedberg/matchit'

" undo
NeoBundle 'omarkhan/gundo.vim'
"NeoBundle 'sjl/gundo.vim'
"NeoBundle 'mbbill/undotree'

" comment
NeoBundle 'scrooloose/nerdcommenter'

" syntax check
NeoBundle 'scrooloose/syntastic'

" align
NeoBundle 'godlygeek/tabular'
"NeoBundle 'junegunn/vim-easy-align'

" complete
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'

" html5
NeoBundle 'othree/html5.vim'

"css
NeoBundle 'hail2u/vim-css3-syntax'
NeoBundle 'cakebaker/scss-syntax.vim'

" javascript
NeoBundle 'othree/yajs.vim' "syntax highlight
NeoBundle 'othree/javascript-libraries-syntax.vim' "highlight
NeoBundle 'othree/jspc.vim' "complete
NeoBundle 'maksimr/vim-jsbeautify' "format
NeoBundle 'rschmukler/pangloss-vim-indent' "indent
"NeoBundle 'pangloss/vim-javascript' "indent
"NeoBundle 'buztard/vim-javascript', { 'rev' : 'dot-chained-calls' }

"json
NeoBundle 'elzr/vim-json' "json syntax

" jsx
NeoBundle 'mxw/vim-jsx' " jsx indent/syntax

" python
"NeoBundle 'tmhedberg/SimpylFold'
NeoBundle 'hynek/vim-python-pep8-indent'
"NeoBundle 'davidhalter/jedi-vim'

" c
"NeoBundle 'a.vim'
"NeoBundle 'Rip-Rip/clang_complete'

"NeoBundle 'rust-lang/rust.vim'
"NeoBundle 'cespare/vim-toml'

" md | rst
"NeoBundle 'tpope/vim-markdown'
"NeoBundle 'Rykka/clickable.vim'
"NeoBundle 'Rykka/riv.vim'
"NeoBundle 'RST-Tables-CJK'
"NeoBundle 'dagwieers/asciidoc-vim'

" nginx
NeoBundle 'evanmiller/nginx-vim-syntax'

" colorscheme
NeoBundle 'altercation/vim-colors-solarized'

" ftl
"NeoBundle 'chaquotay/ftl-vim-syntax'

"sql
"NeoBundle 'sql.vim--Stinson'
"NeoBundle 'dhcmrlchtdj/sql_iabbr.vim'

call neobundle#end()


""" 插件设置
filetype plugin indent on "载入文件类型 插件 缩进
syntax enable "语法加亮
au FileType htmldjango,jsp set ft=html
"au FileType json set ft=javascript
au BufRead,BufNewFile *.ftl set ft=html
"au FileType text set ft=asciidoc

"set background=dark "深色背景
set background=light "浅色背景
let g:solarized_termcolors = 256
let g:solarized_visibility = 'low'
let g:solarized_termtrans = 1
colorscheme solarized
highlight clear SignColumn
highlight link SignColumn CursorColumn

" indent guide
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'unite']
let g:indent_guides_default_mapping = 0

" vim-buffergator
let g:buffergator_split_size = 30
nmap <silent> <F2> :BuffergatorOpen<CR>

" nerd tree
let g:NERDTreeCaseSensitiveSort = 1
let g:NERDTreeChDirMode = 2
"let g:NERDTreeShowHidden = 1
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeSortHiddenFirst = 1
let g:NERDTreeIgnore = ["\.swp$"]
nmap <silent> <F3> :silent! NERDTreeFind<CR>

" nerdtree-git-plugin
let g:NERDTreeIndicatorMapCustom = {
            \ "Modified"  : "M",
            \ "Staged"    : "S",
            \ "Untracked" : "U",
            \ "Renamed"   : "R",
            \ "Unmerged"  : "u",
            \ "Deleted"   : "",
            \ "Dirty"     : "",
            \ "Clean"     : "",
            \ "Unknown"   : ""
            \ }

"tagbar
"let g:tagbar_width = 35
"let g:tagbar_foldlevel = 1
"let g:tagbar_sort = 0
"nmap <silent> <F4> :TagbarOpen fj<CR>

" gundo
let g:gundo_preview_height = 10
let g:gundo_help = 0
let g:gundo_close_on_revert = 1
let g:gundo_prefer_python3=1
nmap <silent> <F5> :silent! GundoToggle<CR>

"undotree
"let g:undotree_SplitWidth = 40
"let g:undotree_DiffpanelHeight = 10
"let g:undotree_SetFocusWhenToggle = 1
"nmap <silent> <F5> :silent! UndotreeToggle<CR>

" js beautify
autocmd FileType javascript,json noremap <buffer> <Leader>ff :call JsBeautify()<CR>
autocmd FileType javascript,json vnoremap <buffer> <Leader>ff :call RangeJsBeautify()<CR>
autocmd FileType html noremap <buffer> <Leader>ff :call HtmlBeautify()<CR>
autocmd FileType html vnoremap <buffer> <Leader>ff :call RangeHtmlBeautify()<CR>
autocmd FileType css,scss noremap <buffer> <Leader>ff :call CSSBeautify()<CR>
autocmd FileType css,scss vnoremap <buffer> <Leader>ff :call RangeCSSBeautify()<CR>

" a.vim
"autocmd FileType c,cpp nmap <Leader>a :A<CR>

" syntastic
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'
"let g:syntastic_python_python_exec = 'python3'
"let g:syntastic_python_flake8_args = '--ignore=W391,E261,E265,E301,E302,E303,E501,E701'
let g:syntastic_html_checkers = []
let g:syntastic_javascript_checkers = ['eslint']
"let g:syntastic_scss_checkers = ['sassc']

" javascript-libraries-syntax.vim
let g:used_javascript_libs = 'jquery,underscore,requirejs'

" unite
"let g:unite_split_rule = 'botright'
let g:unite_enable_start_insert = 1
let g:unite_prompt = '» '
let g:unite_winwidth = 30
let g:unite_winheight = 20
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '--vimgrep --smart-case --nocolor --nogroup --hidden --ignore ".git"'
let g:unite_source_rec_async_command = 'ag  --smart-case --nocolor --nogroup --hidden --ignore ".git" --ignore "node_modules" -g ""'
nmap <C-p> :Unite buffer file_rec/async<CR>
nmap <S-p> :Unite grep:.<CR>
nmap <Leader>p :Unite outline<CR>

" neocomplete
"let g:neocomplete#force_overwrite_completefunc = 1
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 1
inoremap <expr><TAB> pumvisible() ? "<C-n>" : "<TAB>"
imap <C-k> <Plug>(neosnippet_expand_or_jump)
" Enable heavy omni completion.
"if !exists('g:neocomplete#force_omni_input_patterns')
    "let g:neocomplete#force_omni_input_patterns = {}
"endif

" airline
let g:airline_theme="powerlineish"
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols = { 'linenr': '¶', 'paste': 'ρ', 'branch': '⎇', 'whitespace': 'Ξ'}
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0

" git gutter
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '~'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_modified_removed = '!'
highlight link GitGutterAdd CursorColumn
highlight link GitGutterChange CursorColumn
highlight link GitGutterDelete CursorColumn
highlight link GitGutterChangeDelete CursorColumn

" clang_complete
"let g:clang_complete_auto = 0
"let g:clang_complete_macros = 1
"let g:clang_auto_select = 1
"let g:clang_hl_errors=0

" jedi-vim
"let g:jedi#auto_vim_configuration = 0
"let g:jedi#popup_on_dot = 0
"let g:jedi#popup_select_first = 0
"let g:jedi#force_py_version = 3


""" 模板
augroup templates
    autocmd BufNewFile * silent! execute '0r ~/.vim/templates/skeleton.'.expand('<afile>:e')
augroup END


""" 其他
" 调整文件
nmap <silent> <F6> :call ReStructureFile()<CR>
function! ReStructureFile()
    let l = line('.')
    let c = col('.')

    " 调整缩进
    if (&ft !~ 'python\|markdown\|text')
        exe 'normal gg=G``'
    endif
    exe 'silent! :retab'

    " 使用\n换行
    let &ff = 'unix'

    " 使用utf-8编码
    let &fenc = 'utf8'
    " 去除 BOM
    exe 'set nobomb'

    " 删除行尾空格
    exe 'silent! :%s/\s\+$//g'

    " 删除末尾空行
    let lnum = line('$')
    while lnum
        if !empty(getline(lnum))
            if lnum != line('$')
                exe 'normal '.(lnum+1).'ggdG'
            endif
            break
        endif
        let lnum -= 1
    endwhile

    call cursor(l, c)
    exe 'normal zz'
endfunction
