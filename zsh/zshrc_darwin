source ~/.zshrc_grml
source ~/.zshrc_prompt
source ~/.zshrc_others

export EDITOR="vim"
#export PATH="/usr/local/bin:/usr/local/sbin:$PATH"

#export PYENV_ROOT="$HOME/.pyenv"
#export PATH="$PYENV_ROOT/shims:/usr/local/bin:/usr/local/sbin:$PATH"
#if which pyenv > /dev/null; then
    #export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
    #eval "$(pyenv init -)";
    #pyenv virtualenvwrapper_lazy
#fi
#export VIRTUALENVWRAPPER_PYTHON="$(whence python3)"
#source virtualenvwrapper_lazy.sh


export JAVA_HOME="$(/usr/libexec/java_home)"


### git for directoy ###
chpwd_profile_default() {
    [[ ${profile} == ${CHPWD_PROFILE} ]] && return 1
    unset GIT_AUTHOR_NAME
    unset GIT_AUTHOR_EMAIL
    unset GIT_COMMITTER_NAME
    unset GIT_COMMITTER_EMAIL
}
chpwd_profiles
#### END git for directoy ###


### autocompletion ###
fpath=(/usr/local/share/zsh-completions $fpath)
compinit
### END autocompletion ###


### gulp ###
#eval "$(gulp --completion=zsh)"
### END gulp ###


### node ###
export NVM_DIR=~/.nvm
source ~/.nvm/nvm.sh
function chpwd_nvm_use() { nvm use &> /dev/null || nvm use system &> /dev/null ; return 0 }
chpwd_nvm_use
chpwd_functions=( ${chpwd_functions} chpwd_nvm_use )
alias node="node --harmony"
eval "$(npm completion)"
### END node ###


## alias
alias cp="cp -r"
#alias rm="rm -rvfi"
alias rm="rm -rvf"
alias ls="ls -vF"
alias la="ls -A"
alias ll="ls -lhAT"
alias du="du -h"
alias df="df -h"

# 工具
alias j="jobs -dl"
alias h="sudo htop"
alias f="find . -name"
alias ssh="ssh -2"
alias py="python3"
alias py3="python3"
alias py2="python2"

alias sss="python3 -m http.server"
alias mm="mitmproxy --palette light"
alias mmm="mitmproxy --palette light -i '~q|~s'"
alias jj="mvn jetty:run"
alias jjj="mvn jetty:run &>/dev/null &"
alias css="cleancss --s0"
alias ujs="uglifyjs -m -c unsafe=true"
alias marked="marked --gfm --breaks --smart-lists"

sass () {
    node-sass --source-comments --source-map --source-map-embed --source-map-contents --stdout $1 | autoprefixer --map --inline-map --sources-content -b "> 0.01%" -o -;
}

zzz () {
    for i in "$@"; do
        7z a -tzip $i.zip $i;
    done
}

ttt () {
    if [[ -z "$TMUX" ]] ;then
        ID="`tmux ls | grep -vm1 attached | cut -d: -f1`" # get the id of a deattached session
        if [[ -z "$ID" ]] ;then # if not available create a new one
            tmux -CC
        else
            tmux -CC attach -t "$ID" # if available attach to it
        fi
    fi
}
